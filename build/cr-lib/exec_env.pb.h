// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exec_env.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_exec_5fenv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_exec_5fenv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_exec_5fenv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_exec_5fenv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_exec_5fenv_2eproto;
namespace iwasmcr {
class WASMExecEnv;
class WASMExecEnvDefaultTypeInternal;
extern WASMExecEnvDefaultTypeInternal _WASMExecEnv_default_instance_;
class WASMInterpreterFrame;
class WASMInterpreterFrameDefaultTypeInternal;
extern WASMInterpreterFrameDefaultTypeInternal _WASMInterpreterFrame_default_instance_;
}  // namespace iwasmcr
PROTOBUF_NAMESPACE_OPEN
template<> ::iwasmcr::WASMExecEnv* Arena::CreateMaybeMessage<::iwasmcr::WASMExecEnv>(Arena*);
template<> ::iwasmcr::WASMInterpreterFrame* Arena::CreateMaybeMessage<::iwasmcr::WASMInterpreterFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iwasmcr {

// ===================================================================

class WASMInterpreterFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iwasmcr.WASMInterpreterFrame) */ {
 public:
  inline WASMInterpreterFrame() : WASMInterpreterFrame(nullptr) {};
  virtual ~WASMInterpreterFrame();

  WASMInterpreterFrame(const WASMInterpreterFrame& from);
  WASMInterpreterFrame(WASMInterpreterFrame&& from) noexcept
    : WASMInterpreterFrame() {
    *this = ::std::move(from);
  }

  inline WASMInterpreterFrame& operator=(const WASMInterpreterFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline WASMInterpreterFrame& operator=(WASMInterpreterFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WASMInterpreterFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WASMInterpreterFrame* internal_default_instance() {
    return reinterpret_cast<const WASMInterpreterFrame*>(
               &_WASMInterpreterFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WASMInterpreterFrame& a, WASMInterpreterFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(WASMInterpreterFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WASMInterpreterFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WASMInterpreterFrame* New() const final {
    return CreateMaybeMessage<WASMInterpreterFrame>(nullptr);
  }

  WASMInterpreterFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WASMInterpreterFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WASMInterpreterFrame& from);
  void MergeFrom(const WASMInterpreterFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WASMInterpreterFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iwasmcr.WASMInterpreterFrame";
  }
  protected:
  explicit WASMInterpreterFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_exec_5fenv_2eproto);
    return ::descriptor_table_exec_5fenv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFooFieldNumber = 1,
  };
  // string foo = 1;
  void clear_foo();
  const std::string& foo() const;
  void set_foo(const std::string& value);
  void set_foo(std::string&& value);
  void set_foo(const char* value);
  void set_foo(const char* value, size_t size);
  std::string* mutable_foo();
  std::string* release_foo();
  void set_allocated_foo(std::string* foo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_foo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_foo(
      std::string* foo);
  private:
  const std::string& _internal_foo() const;
  void _internal_set_foo(const std::string& value);
  std::string* _internal_mutable_foo();
  public:

  // @@protoc_insertion_point(class_scope:iwasmcr.WASMInterpreterFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr foo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_exec_5fenv_2eproto;
};
// -------------------------------------------------------------------

class WASMExecEnv PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iwasmcr.WASMExecEnv) */ {
 public:
  inline WASMExecEnv() : WASMExecEnv(nullptr) {};
  virtual ~WASMExecEnv();

  WASMExecEnv(const WASMExecEnv& from);
  WASMExecEnv(WASMExecEnv&& from) noexcept
    : WASMExecEnv() {
    *this = ::std::move(from);
  }

  inline WASMExecEnv& operator=(const WASMExecEnv& from) {
    CopyFrom(from);
    return *this;
  }
  inline WASMExecEnv& operator=(WASMExecEnv&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WASMExecEnv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WASMExecEnv* internal_default_instance() {
    return reinterpret_cast<const WASMExecEnv*>(
               &_WASMExecEnv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WASMExecEnv& a, WASMExecEnv& b) {
    a.Swap(&b);
  }
  inline void Swap(WASMExecEnv* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WASMExecEnv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WASMExecEnv* New() const final {
    return CreateMaybeMessage<WASMExecEnv>(nullptr);
  }

  WASMExecEnv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WASMExecEnv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WASMExecEnv& from);
  void MergeFrom(const WASMExecEnv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WASMExecEnv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iwasmcr.WASMExecEnv";
  }
  protected:
  explicit WASMExecEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_exec_5fenv_2eproto);
    return ::descriptor_table_exec_5fenv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurFrameFieldNumber = 1,
  };
  // .iwasmcr.WASMInterpreterFrame cur_frame = 1;
  bool has_cur_frame() const;
  private:
  bool _internal_has_cur_frame() const;
  public:
  void clear_cur_frame();
  const ::iwasmcr::WASMInterpreterFrame& cur_frame() const;
  ::iwasmcr::WASMInterpreterFrame* release_cur_frame();
  ::iwasmcr::WASMInterpreterFrame* mutable_cur_frame();
  void set_allocated_cur_frame(::iwasmcr::WASMInterpreterFrame* cur_frame);
  private:
  const ::iwasmcr::WASMInterpreterFrame& _internal_cur_frame() const;
  ::iwasmcr::WASMInterpreterFrame* _internal_mutable_cur_frame();
  public:
  void unsafe_arena_set_allocated_cur_frame(
      ::iwasmcr::WASMInterpreterFrame* cur_frame);
  ::iwasmcr::WASMInterpreterFrame* unsafe_arena_release_cur_frame();

  // @@protoc_insertion_point(class_scope:iwasmcr.WASMExecEnv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::iwasmcr::WASMInterpreterFrame* cur_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_exec_5fenv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WASMInterpreterFrame

// string foo = 1;
inline void WASMInterpreterFrame::clear_foo() {
  foo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WASMInterpreterFrame::foo() const {
  // @@protoc_insertion_point(field_get:iwasmcr.WASMInterpreterFrame.foo)
  return _internal_foo();
}
inline void WASMInterpreterFrame::set_foo(const std::string& value) {
  _internal_set_foo(value);
  // @@protoc_insertion_point(field_set:iwasmcr.WASMInterpreterFrame.foo)
}
inline std::string* WASMInterpreterFrame::mutable_foo() {
  // @@protoc_insertion_point(field_mutable:iwasmcr.WASMInterpreterFrame.foo)
  return _internal_mutable_foo();
}
inline const std::string& WASMInterpreterFrame::_internal_foo() const {
  return foo_.Get();
}
inline void WASMInterpreterFrame::_internal_set_foo(const std::string& value) {
  
  foo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WASMInterpreterFrame::set_foo(std::string&& value) {
  
  foo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:iwasmcr.WASMInterpreterFrame.foo)
}
inline void WASMInterpreterFrame::set_foo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  foo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:iwasmcr.WASMInterpreterFrame.foo)
}
inline void WASMInterpreterFrame::set_foo(const char* value,
    size_t size) {
  
  foo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:iwasmcr.WASMInterpreterFrame.foo)
}
inline std::string* WASMInterpreterFrame::_internal_mutable_foo() {
  
  return foo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WASMInterpreterFrame::release_foo() {
  // @@protoc_insertion_point(field_release:iwasmcr.WASMInterpreterFrame.foo)
  return foo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WASMInterpreterFrame::set_allocated_foo(std::string* foo) {
  if (foo != nullptr) {
    
  } else {
    
  }
  foo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), foo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:iwasmcr.WASMInterpreterFrame.foo)
}
inline std::string* WASMInterpreterFrame::unsafe_arena_release_foo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:iwasmcr.WASMInterpreterFrame.foo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return foo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WASMInterpreterFrame::unsafe_arena_set_allocated_foo(
    std::string* foo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (foo != nullptr) {
    
  } else {
    
  }
  foo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      foo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iwasmcr.WASMInterpreterFrame.foo)
}

// -------------------------------------------------------------------

// WASMExecEnv

// .iwasmcr.WASMInterpreterFrame cur_frame = 1;
inline bool WASMExecEnv::_internal_has_cur_frame() const {
  return this != internal_default_instance() && cur_frame_ != nullptr;
}
inline bool WASMExecEnv::has_cur_frame() const {
  return _internal_has_cur_frame();
}
inline void WASMExecEnv::clear_cur_frame() {
  if (GetArena() == nullptr && cur_frame_ != nullptr) {
    delete cur_frame_;
  }
  cur_frame_ = nullptr;
}
inline const ::iwasmcr::WASMInterpreterFrame& WASMExecEnv::_internal_cur_frame() const {
  const ::iwasmcr::WASMInterpreterFrame* p = cur_frame_;
  return p != nullptr ? *p : *reinterpret_cast<const ::iwasmcr::WASMInterpreterFrame*>(
      &::iwasmcr::_WASMInterpreterFrame_default_instance_);
}
inline const ::iwasmcr::WASMInterpreterFrame& WASMExecEnv::cur_frame() const {
  // @@protoc_insertion_point(field_get:iwasmcr.WASMExecEnv.cur_frame)
  return _internal_cur_frame();
}
inline void WASMExecEnv::unsafe_arena_set_allocated_cur_frame(
    ::iwasmcr::WASMInterpreterFrame* cur_frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_frame_);
  }
  cur_frame_ = cur_frame;
  if (cur_frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:iwasmcr.WASMExecEnv.cur_frame)
}
inline ::iwasmcr::WASMInterpreterFrame* WASMExecEnv::release_cur_frame() {
  auto temp = unsafe_arena_release_cur_frame();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::iwasmcr::WASMInterpreterFrame* WASMExecEnv::unsafe_arena_release_cur_frame() {
  // @@protoc_insertion_point(field_release:iwasmcr.WASMExecEnv.cur_frame)
  
  ::iwasmcr::WASMInterpreterFrame* temp = cur_frame_;
  cur_frame_ = nullptr;
  return temp;
}
inline ::iwasmcr::WASMInterpreterFrame* WASMExecEnv::_internal_mutable_cur_frame() {
  
  if (cur_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::iwasmcr::WASMInterpreterFrame>(GetArena());
    cur_frame_ = p;
  }
  return cur_frame_;
}
inline ::iwasmcr::WASMInterpreterFrame* WASMExecEnv::mutable_cur_frame() {
  // @@protoc_insertion_point(field_mutable:iwasmcr.WASMExecEnv.cur_frame)
  return _internal_mutable_cur_frame();
}
inline void WASMExecEnv::set_allocated_cur_frame(::iwasmcr::WASMInterpreterFrame* cur_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cur_frame_;
  }
  if (cur_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cur_frame);
    if (message_arena != submessage_arena) {
      cur_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_frame, submessage_arena);
    }
    
  } else {
    
  }
  cur_frame_ = cur_frame;
  // @@protoc_insertion_point(field_set_allocated:iwasmcr.WASMExecEnv.cur_frame)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace iwasmcr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_exec_5fenv_2eproto
